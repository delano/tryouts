#!/usr/bin/env ruby

# Coverage tracking (must be first)
if ENV['COVERAGE'] || ENV['SIMPLECOV']
  require 'simplecov'
  # Reset any existing coverage data to prevent line count mismatches
  Coverage.result(stop: false, clear: true) if defined?(Coverage)
  SimpleCov.start do
    track_files 'lib/**/*.rb'
    add_filter '/try/'
    add_filter '/test/'
    add_filter '/test_'
    add_filter '/spec/'
    add_filter '/examples/'
    add_filter '/docs/'

    add_group 'Core', 'lib/tryouts.rb'
    add_group 'CLI', 'lib/tryouts/cli'
    add_group 'Formatters', 'lib/tryouts/cli/formatters'
    add_group 'Parsers', 'lib/tryouts/prism_parser.rb'
    add_group 'Data Structures', ['lib/tryouts/testcase.rb', 'lib/tryouts/testbatch.rb']
    add_group 'Translators', 'lib/tryouts/translators'
    add_group 'Execution', ['lib/tryouts/test_executor.rb', 'lib/tryouts/test_runner.rb', 'lib/tryouts/file_processor.rb']

    coverage_dir 'coverage'

    # Coverage thresholds disabled to prevent CI failures
    # minimum_coverage 80
    # minimum_coverage_by_file 70
  end

  SimpleCov.command_name 'Tryouts CLI'
end

require_relative '../lib/tryouts'

# Add development library paths
lib_glob = File.join(Dir.pwd, '{lib,../lib,.}')
Tryouts.update_load_path(lib_glob) if Tryouts.respond_to?(:update_load_path)

# Parse args and run CLI
begin
  files, options = Tryouts::CLI.parse_args(ARGV)

  # Expand files if directories are given
  expanded_files = []
  files.each do |file_or_dir|
    if File.directory?(file_or_dir)
      # If it's a directory, find all *_try.rb and *.try.rb files within it
      dir_files = Dir.glob(['**/*_try.rb', '**/*.try.rb'], base: file_or_dir)
      expanded_files.concat(dir_files.map { |f| File.join(file_or_dir, f) })
    else
      # If it's a file, add it as-is
      expanded_files << file_or_dir
    end
  end
  files          = expanded_files

  # Default file discovery if no files specified
  if files.empty?
    raw_files = Dir.glob(
      ['{app,apps,lib,try,tryouts}/**/*_try.rb', './*_try.rb', '{app,apps,lib,try,tryouts}/**/*.try.rb', './*.try.rb'],
      base: Dir.pwd,
    )

    # Normalize paths so that slight variations are ignored
    # e.g. ./test_try.rb and ././test_try.rb
    files     = raw_files.map { |f| File.expand_path(f, Dir.pwd) }.uniq.sort
  else
    # Normalize paths for explicitly specified files/directories
    files = files.map { |f| File.expand_path(f, Dir.pwd) }.uniq.sort
  end

  cli = Tryouts::CLI.new
  exit cli.run(files, **options)
rescue StandardError => ex
  warn "Error: #{ex.message}"
  warn ex.backtrace.join("\n") if options&.[](:debug)
  exit 1
end
